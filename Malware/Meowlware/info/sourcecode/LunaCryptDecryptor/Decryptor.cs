using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace LunaCryptDecryptor
{
    internal class Decryptor
    {
        public static void EncryptFiles(string directoryPath)
        {
            string[] unencryptedFiles = Directory.GetFiles(directoryPath, "*");

            if (unencryptedFiles.Length == 0)
                return;

            string encryptionKey = CalculateKey(unencryptedFiles);
            Debug.WriteLine("[i] Encryption key: " + encryptionKey);

            foreach (string file in unencryptedFiles)
            {
                string newPath = Path.Combine(directoryPath, Path.GetFileName(file) + ".lunacrypt");
                EncryptFileAES(file, newPath, encryptionKey, iv);
            }
        }

        public static string CalculateKey(string[] files)
        {
            string sha256Hash;
            using (SHA256 sha = SHA256.Create())
            {
                Debug.WriteLine("[i] Using file " + files[0] + " to create key");
                using (FileStream fs = File.OpenRead(files[0]))
                {
                    sha256Hash = BitConverter.ToString(sha.ComputeHash(fs)).Replace("-", "").ToLower();
                }
            }

            char[] modifiedHash = sha256Hash.ToCharArray();
            for (int i = 0; i < sha256Hash.Length; i += 4)
            {
                modifiedHash[i] = string2[i];
            }
            return new string(modifiedHash);
            //return sha256Hash;
        }

        private static void EncryptFileAES(string inputFile, string outputFile, string key, byte[] iv)
        {
            try
            {
                using (Aes aes = Aes.Create())
                {
                    byte[] key2 = GenerateAesKeyFromPassword(key);
                    aes.Key = key2;
                    aes.IV = iv;
                    aes.Mode = CipherMode.CFB;
                    aes.Padding = PaddingMode.Zeros;
                    using (FileStream fileStream = new FileStream(inputFile, FileMode.Open))
                    {
                        using (FileStream fileStream2 = new FileStream(outputFile, FileMode.Create))
                        {
                            using (ICryptoTransform cryptoTransform = aes.CreateEncryptor())
                            {
                                using (CryptoStream cryptoStream = new CryptoStream(fileStream2, cryptoTransform, CryptoStreamMode.Write))
                                {
                                    byte[] array = new byte[4096];
                                    int count;
                                    while ((count = fileStream.Read(array, 0, array.Length)) > 0)
                                    {
                                        cryptoStream.Write(array, 0, count);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                Console.WriteLine("Encryption error: " + err.Message);
            }
        }

        public static void DecryptFiles(string directoryPath, string decryptionKey)
        {
            string[] encryptedFiles = Directory.GetFiles(directoryPath, "*.lunacrypt");

            if (encryptedFiles.Length == 0)
                return;

            foreach (string file in encryptedFiles)
            {
                string newPath = Path.Combine(directoryPath, Path.GetFileNameWithoutExtension(file));
                DecryptFileAES(file, newPath, decryptionKey, iv);
            }
        }


        private static void DecryptFileAES(string inputFile, string outputFile, string key, byte[] iv)
        {
            try
            {
                using (Aes aes = Aes.Create())
                {
                    byte[] key2 = GenerateAesKeyFromPassword(key);
                    aes.Key = key2;
                    aes.IV = iv;
                    aes.Mode = CipherMode.CFB;
                    aes.Padding = PaddingMode.Zeros;
                    using (FileStream fileStream = new FileStream(inputFile, FileMode.Open))
                    {
                        using (FileStream fileStream2 = new FileStream(outputFile, FileMode.Create))
                        {
                            using (ICryptoTransform cryptoTransform = aes.CreateDecryptor())
                            {
                                using (CryptoStream cryptoStream = new CryptoStream(fileStream2, cryptoTransform, CryptoStreamMode.Write))
                                {
                                    byte[] array = new byte[4096];
                                    int count;
                                    while ((count = fileStream.Read(array, 0, array.Length)) > 0)
                                    {
                                        cryptoStream.Write(array, 0, count);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                Console.WriteLine("Decryption error: " + err.Message);
            }
        }

        private static byte[] GenerateAesKeyFromPassword(string password)
        {
            byte[] bytes = Encoding.UTF8.GetBytes("KnownSaltValue");
            byte[] result;
            using (Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(password, bytes, 10000, HashAlgorithmName.SHA256))
            {
                byte[] bytes2 = rfc2898DeriveBytes.GetBytes(32);
                if (bytes2.Length != 32)
                {
                    throw new InvalidOperationException("Derived key size is not valid for AES encryption");
                }
                result = bytes2;
            }
            return result;
        }

        private static string string2 = "6f2dc9a8e5f1b4dc2b8a3e4f6c7d9a8b1f2c3a7e4b1f2c3a7e4b1f2c3a7e4b1a";
        private static byte[] iv = new byte[] { 69, 78, 72, 82, 69, 85, 67, 84, 68, 79, 65, 80, 89, 84, 76, 82 };
    }
}
